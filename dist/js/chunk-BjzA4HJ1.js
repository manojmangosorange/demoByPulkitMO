import{t as e}from"../assets/index-BdECdtOY.js";const t={async getJobPostings(t=!1){try{let i=e.from("job_postings").select("*").order("created_at",{ascending:!1});t||(i=i.eq("is_visible",!0).eq("status","Active"));const{data:a,error:r}=await i;if(r)throw r;return await Promise.all((a||[]).map(async t=>{const{count:i}=await e.from("applicants").select("*",{count:"exact",head:!0}).eq("job_id",t.id);return{id:String(t.id),title:t.title,department:t.department,type:t.type,location:t.location,experience:t.experience,salary:t.salary,description:t.description,responsibilities:t.responsibilities,requirements:t.requirements,deadline:t.deadline,status:t.status,isVisible:t.is_visible,createdAt:t.created_at,updatedAt:t.updated_at,applicantCount:i||0}}))}catch(i){return[]}},async getJobPosting(t){try{const{data:i,error:a}=await e.from("job_postings").select("*").eq("id",t).single();if(a)throw a;return{id:String(i.id),title:i.title,department:i.department,type:i.type,location:i.location,experience:i.experience,salary:i.salary,description:i.description,responsibilities:i.responsibilities,requirements:i.requirements,deadline:i.deadline,status:i.status,isVisible:i.is_visible,createdAt:i.created_at,updatedAt:i.updated_at}}catch(i){return null}},async createJobPosting(t){try{const{data:i,error:a}=await e.from("job_postings").insert([{title:t.title,department:t.department,type:t.type,location:t.location,experience:t.experience,salary:t.salary,description:t.description,responsibilities:t.responsibilities,requirements:t.requirements,deadline:t.deadline,status:t.status,is_visible:t.isVisible}]).select().single();if(a)throw a;return{id:String(i.id),title:i.title,department:i.department,type:i.type,location:i.location,experience:i.experience,salary:i.salary,description:i.description,responsibilities:i.responsibilities,requirements:i.requirements,deadline:i.deadline,status:i.status,isVisible:i.is_visible,createdAt:i.created_at,updatedAt:i.updated_at}}catch(i){return null}},async updateJobPosting(t,i){try{const a={updated_at:(new Date).toISOString()};void 0!==i.title&&(a.title=i.title),void 0!==i.department&&(a.department=i.department),void 0!==i.type&&(a.type=i.type),void 0!==i.location&&(a.location=i.location),void 0!==i.experience&&(a.experience=i.experience),void 0!==i.salary&&(a.salary=i.salary),void 0!==i.description&&(a.description=i.description),void 0!==i.responsibilities&&(a.responsibilities=i.responsibilities),void 0!==i.requirements&&(a.requirements=i.requirements),void 0!==i.deadline&&(a.deadline=i.deadline),void 0!==i.status&&(a.status=i.status),void 0!==i.isVisible&&(a.is_visible=i.isVisible);const{error:r}=await e.from("job_postings").update(a).eq("id",t);if(r)throw r;return!0}catch(a){return!1}},async deleteJobPosting(t){try{const{error:i}=await e.from("job_postings").delete().eq("id",t);if(i)throw i;return!0}catch(i){return!1}},async getApplicants(t){try{let i=e.from("applicants").select("\n          *,\n          job_postings!inner (\n            id,\n            title\n          )\n        ").order("applied_at",{ascending:!1});t&&(i=i.eq("job_id",t));const{data:a,error:r}=await i;if(r)throw r;return(a??[]).map(e=>({id:String(e.id),jobId:String(e.job_id),name:e.name||"",email:e.email||"",phone:e.phone||"",resumeUrl:e.resume_url||"",coverLetter:e.cover_letter||"",status:e.status||"Applied",notes:e.notes||"",appliedAt:e.applied_at,updatedAt:e.updated_at,jobTitle:e.job_postings?.title||""}))}catch(i){return[]}},async updateApplicantStatus(t,i,a){try{const{error:r}=await e.from("applicants").update({status:i,notes:a,updated_at:(new Date).toISOString()}).eq("id",t);if(r)throw r;return!0}catch(r){return!1}},async submitApplication(t){try{const{error:i}=await e.from("applicants").insert([{job_id:t.jobId,name:t.name,email:t.email,phone:t.phone||null,resume_url:t.resumeUrl,cover_letter:t.coverLetter||null,status:"Applied"}]);if(i)throw i;return!0}catch(i){return!1}},async getDashboardStats(){try{const[t,i,a,r]=await Promise.all([e.from("job_postings").select("status"),e.from("applicants").select("*",{count:"exact",head:!0}),e.from("applicants").select("*",{count:"exact",head:!0}).eq("status","Applied"),e.from("applicants").select("\n              *,\n              job_postings(title)\n            ").order("applied_at",{ascending:!1}).limit(5)]),s=t.data??[],n=i.count??0,o=a.count??0,l=r.data??[];return{totalJobs:s.length,activeJobs:s.filter(e=>"Active"===e.status).length,totalApplicants:n,pendingApplications:o,recentApplications:l.map(e=>({id:String(e.id),jobId:String(e.job_id),name:e.name||"",email:e.email||"",phone:e.phone||"",resumeUrl:e.resume_url||"",coverLetter:e.cover_letter||"",status:e.status||"Applied",notes:e.notes||"",appliedAt:e.applied_at,updatedAt:e.updated_at,jobTitle:e.job_postings?.title||""}))}}catch(t){return{totalJobs:0,activeJobs:0,totalApplicants:0,pendingApplications:0,recentApplications:[]}}},async uploadResume(t){try{const i=t.name.split(".").pop(),a=`resumes/${`${Date.now()}-${Math.random().toString(36).substring(2)}.${i}`}`,{error:r}=await e.storage.from("career-files").upload(a,t,{cacheControl:"3600",upsert:!1});if(r)throw r;const{data:s}=e.storage.from("career-files").getPublicUrl(a);return s.publicUrl}catch(i){return null}}};export{t as c};
